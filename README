When a web browser uses a proxy, it contacts the proxy instead of communicating directly with the web
server; the proxy forwards its client’s request to the web server, reads the server’s response, then forwards
the response to the client.

First part of code deals with writing a basic web proxy server to accept incoming connections, read and parse requests, forward requests to web servers,
read the servers’ responses, and forward those responses to the corresponding clients.

Second part deals with handling multiple concurrent connections.

Third part deals with adding caching to the proxy using a simple main memory cache of recently accessed web content.

This directory contains the files you will need for the CS:APP Proxy
Lab.

proxy.c
csapp.h
csapp.c
    These are starter files.  csapp.c and csapp.h are described in
    your textbook. 

    You may make any changes you like to these files.  And you may
    create and handin any additional files you like.

    Please use `port-for-user.pl' or 'free-port.sh' to generate
    unused ports for your proxy or tiny server. 

doc
    Documentation for Pxydrive testing framework

Makefile
    This is the makefile that builds the proxy program.  Type "make"
    to build your solution, or "make clean" followed by "make" for a
    fresh build. 

    Type "make handin" to create the tarfile that you will be handing
    in. You can modify it any way you like. Autolab will use your
    Makefile to build your proxy from source.

port-for-user.pl
    Generates a random port for a particular user
    usage: ./port-for-user.pl <AndrewID>

free-port.sh
    Handy script that identifies an unused TCP port that you can use
    for your proxy or tiny. 
    usage: ./free-port.sh

driver.sh
    The autograder for Basic, Concurrency, and Cache.        
    usage: ./driver.sh

nop-server.py
     helper for the autograder.         

src
     Pxydrive testing framework

tests
     Test traces used by Pxydrive

tiny
    Tiny Web server from the CS:APP text

